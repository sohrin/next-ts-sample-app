import * as cdk from '@aws-cdk/core';
import ec2 = require("@aws-cdk/aws-ec2");
import ecs = require("@aws-cdk/aws-ecs");
import ecs_patterns = require("@aws-cdk/aws-ecs-patterns");
import rds = require("@aws-cdk/aws-rds");
// TODO: 使わなかったら後でnpm uninstall --saveする
import ecr = require("@aws-cdk/aws-ecr");

export class AwsCdkStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // TODO: 外部注入値を「this.node.tryGetContext('key');」と「--context」で設定


    // VPCの作成
    // https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.Vpc.html
    const vpc = new ec2.Vpc(this, "next-ts-sample-app-VPC", {
      cidr: "10.0.0.0/16",
      defaultInstanceTenancy: ec2.DefaultInstanceTenancy.DEFAULT,
      enableDnsSupport: true,
      enableDnsHostnames: true,
      // 空を指定しないといくつかサブネットが作られてしまう
      subnetConfiguration: [
        // TODO: VPCでサブネットを作るように変えることで、アプリへのアクセスに影響がないか心配
        {
          name: 'next-ts-sample-app-Subnet-DBCluster',
          subnetType: ec2.SubnetType.PUBLIC // TODO: ゆくゆくはec2.SubnetType.ISOLATED
        }
      ]
    })
  
    // // サブネットの作成
    // // https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.Subnet.html
    // const subnet = new ec2.Subnet(this, "next-ts-sample-app-Subnet",{
    //   availabilityZone: "ap-northeast-1a",
    //   vpcId: vpc.vpcId,
    //   // 他のサブネットと被らない値
    //   cidrBlock: "10.0.255.0/24",
    //   mapPublicIpOnLaunch: true
    // });

    // // セキュリティグループの作成
    // // https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.SecurityGroup.html
    // const securityGroup = new ec2.SecurityGroup(this, 'next-ts-sample-app-SecurityGroup', {
    //   vpc
    // });
    // securityGroup.addEgressRule(ec2.Peer.anyIpv4(), ec2.Port.allTraffic());
    // securityGroup.addIngressRule(ec2.Peer.ipv4(sshAllowCidrIp), ec2.Port.tcp(22));

    // // インターネットゲートウェイの作成・VPCとアタッチ
    // const internetGateway = new ec2.CfnInternetGateway(this, "next-ts-sample-app-InternetGateway", {
    // })
    // new ec2.CfnVPCGatewayAttachment(this, "next-ts-sample-app-VPCGatewayAttachment", {
    //   vpcId: vpc.vpcId,
    //   internetGatewayId: internetGateway.ref
    // })

    // // ルートテーブルの作成
    // subnet.addRoute("next-ts-sample-app-RouteTable", {
    //   routerType: ec2.RouterType.GATEWAY,
    //   routerId: internetGateway.ref
    // })






// //    // ECRリポジトリの作成
// //    const repository = new ecr.Repository(this, 'next-ts-sample-app-ECRRepository');

//     // ECSクラスタの作成
//     const cluster = new ecs.Cluster(this, 'next-ts-sample-app-Cluster', {
//       // 自前でVPCを作らずデフォルトに任せる
// //      vpc,
//       clusterName: "next-ts-sample-app-RouteTableCluster"
//     });

//     // Create a load-balanced Fargate service and make it public
//     // https://docs.aws.amazon.com/cdk/latest/guide/ecs_example.html  
//     // ※以下は情報が少し古いがほとんど同じことをやってる。
//     // https://dev.classmethod.jp/articles/aws-cdk-getting-ecs/
//     new ecs_patterns.ApplicationLoadBalancedFargateService(this, "MyFargateService", {
//       cluster: cluster, // Required
//       cpu: 512, // Default is 256
//       desiredCount: 6, // Default is 1
//       // いったんDockerHubからイメージを取得
//       taskImageOptions: { image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample') },
//       memoryLimitMiB: 2048, // Default is 512
//       publicLoadBalancer: true // Default is false
//     });

    const db = new rds.DatabaseCluster(this, 'next-ts-sample-app-DBCluster', {
      engine: rds.DatabaseClusterEngine.AURORA_POSTGRESQL,
      engineVersion: '10.7',
      instances: 1,
      masterUser: {
        username: 'digdag',
      },
      defaultDatabaseName: "appdb",
//      port: dbPort,
      instanceProps: {
        instanceType: ec2.InstanceType.of(ec2.InstanceClass.R5, ec2.InstanceSize.LARGE),
        vpc: vpc,
        vpcSubnets: {
          subnetType: ec2.SubnetType.PUBLIC // TODO: ゆくゆくはec2.SubnetType.ISOLATED
        }
      },
      parameterGroup: new rds.ClusterParameterGroup(this, 'next-ts-sample-app-DBClusterPArameterGroup', {
        family: 'aurora-postgresql10',
        parameters: {
          application_name: 'next-ts-sample-app',
        }
      }),
      removalPolicy: cdk.RemovalPolicy.DESTROY // TODO: for test
    })
    
//     // キーペアの作成
//     // CDK SSM Document：https://awscdk.io/packages/cdk-ec2-key-pair@1.1.0/#/
//     // const key = new KeyPair(this, 'next-ts-sample-app-KeyPair', {
//     //   name: 'next-ts-sample-app-KeyPair',
//     //   description: 'KeyPair generated by AWS CDK.',
//     // });

//     // EC2インスタンスの作成
//     // https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnInstance.html
//     const ec2Instance = new ec2.CfnInstance(this, 'next-ts-sample-app-EC2', {
//       imageId: new ec2.AmazonLinuxImage().getImage(this).imageId,
//       instanceType: new ec2.InstanceType('t2.micro').toString(),
//       networkInterfaces: [{
//         associatePublicIpAddress: true,
//         deviceIndex: '0',
//         groupSet: [securityGroup.securityGroupId],
//         subnetId: subnet.subnetId // vpc.publicSubnets[0].subnetId
//       }],
// //      keyName: key.name // this.node.tryGetContext('key_pair')
//     })

    // // Elastic IPの作成・割り当て
    // // https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.CfnEIP.html
    // const elasticIp = new ec2.CfnEIP(this, 'next-ts-sample-app-elastic-ip', {
    //   instanceId: ec2Instance.ref
    // })

//    new cdk.CfnOutput(this, 'Id', { value: ec2Instance.ref });
//    new cdk.CfnOutput(this, 'elasticIp', { value: elasticIp.ref });
  }
}
